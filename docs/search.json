[
  {
    "objectID": "aboutPage/about.html",
    "href": "aboutPage/about.html",
    "title": "Hi, Iâ€™m Josh Pearlson",
    "section": "",
    "text": "I currently work in finance in NYC creating and applying advanced analytics to problems in fundamental and systematic investing. Previously, I graduated from Washington University in St.Â Louis where I studied Computer Science and Finance. My main interests are modeling, machine learning, and capital markets. I love meeting and connecting with new people, so feel free to email me or LinkedIn message me!\n\n\n\n\nExperienceAwardsPapersEducationHobbies\n\n\nBlackRock Analyst | Summer 2025 - Current | New York, NY \nBlackRock Intern | Summer 2024 | New York, NY  &gt; Securities lending optimization\nWashington University Natural Language Processing Laboratory Research Lab Member | August 2022 - August 2024  &gt; Joined pre-ChatGPT. Conducted NLP research using HPC to train and evaluate LLMs, supporting several research projects (including my own: DPFM@ICLR 2024).\nMoodyâ€™s Analytics Software Engineering Intern | Summer 2023 | New York, NY &gt; Worked on the NewsEdge team (NewsEdge) delivering ultra-low-latency news data.\nPlayBook (Startup) Data Science Intern | Summer 2022 | Boston, MA\nHarvard Surgical Navigation and Robotics Laboratory Research Intern | Summer 2020 | Boston, MA\n\n\nOutstanding Junior Award | Department of Computer Science  Hackathon WashU 2023 Winner | Social Connections Category  Deanâ€™s List | All Semesters \n\n\nLarge Language Models Recognize Decentralized Finance Entities Lead Author - Data Problems for Foundation Models at International Conference on Learning Representations 2024 Link \nMapping Lesions from MP-MRI using Convolution Neural Network Lead Author - SPIE Medical Imaging 2020 Link\n\n\nWashington University in St.Â Louis BS in Computer Science & Finance August 2021 - May 2025\n\n\n\nPoker (PLO, NLTH, HU)\nChess\nBasketball (go Celtics)\nTennis\nGym (former Powerlifter for 3 years)"
  },
  {
    "objectID": "articles/blog.html",
    "href": "articles/blog.html",
    "title": "Articles",
    "section": "",
    "text": "Modeling a Coin Flip Game\n\n\n\n\n\n\npython\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nAug 16, 2024\n\n\nJosh Pearlson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "articles/posts/coin-flip-game/modelCoinFlipGame.html",
    "href": "articles/posts/coin-flip-game/modelCoinFlipGame.html",
    "title": "Modeling a Coin Flip Game",
    "section": "",
    "text": "If you flip a coin until you decide to stop and you want to maximize the ratio of heads to total flips, what is the expected ratio?"
  },
  {
    "objectID": "articles/posts/coin-flip-game/modelCoinFlipGame.html#coin-flip-game",
    "href": "articles/posts/coin-flip-game/modelCoinFlipGame.html#coin-flip-game",
    "title": "Modeling a Coin Flip Game",
    "section": "Coin Flip Game",
    "text": "Coin Flip Game\nThis is a program I made to simulate a game I came across preparing for job interviews. The idea of the game is this:  If you flip a coin until you decide to stop and you want to maximize the ratio of heads to total flips, what is the expected ratio?"
  },
  {
    "objectID": "articles/posts/coin-flip-game/modelCoinFlipGame.html#my-strategy",
    "href": "articles/posts/coin-flip-game/modelCoinFlipGame.html#my-strategy",
    "title": "Modeling a Coin Flip Game",
    "section": "My strategy",
    "text": "My strategy\nAt first glace the problem seems easy, but as you start modeling you realize it is quite complicated. Initially I came up with a maximum ratio .75 as my estimate. This comes from the idea that there is a 50% chance we get heads on our first flip (a ratio of 1 heads / 1 total flips = 100%) and stop, or a 50% chance we get tails then keep flipping till in the long run we get a ratio of .5 (since we expect to get 1 heads for every 2 flips we do). This will give us \\(.5*1 + .5*.5 = .75\\) \nNow lets go and try to model this idea and see if we can improve on it at all: \n\nif we have greater than some stopRatio X of heads/totalFlips (my intuition tells me this should be .50 since that is the long run ev) we will stop\n\nif we do not hit this threshold we just keep flipping till we do\n\nModel out which number works best as a stopRatio X to set as a threshold for achieving the best results possible\nTo avoid recursive depth problems with python if we have flipped more than 1000 times in a single simulation I will equate this to a ratio of max(currentRatio, .5) since if we keep flipping till infinity we approach a ratio of .5 heads to total flips.\n\n\nimport random\nimport pandas as pd\nfrom datetime import datetime\n\n\n\ndef runFlipSimulation(numRuns:int, stopRatio:float) -&gt; float:\n    averageSimulationOutcome = 0\n    for i in range(numRuns):\n        averageSimulationOutcome += (runSingleSimulation(0,0,stopRatio)/numRuns)\n    \n    return round(averageSimulationOutcome,4)\n\ndef runSingleSimulation(numPreviousFlips:int,numHeads:int,stopRatio:float) -&gt; float:\n    # here we are calling 0 tails and 1 heads\n    coin_flip = random.randint(0,1)\n    numPreviousFlips+=1\n\n    if coin_flip == 1:\n        numHeads+=1\n    \n    currentRatio = numHeads/numPreviousFlips\n\n    if currentRatio &gt; stopRatio:\n        return currentRatio\n\n    # if depth &gt;1000 then lets call it .5 as the ratio (long run result anyway)\n    # this depth limit stops us from bricking python \n    if numPreviousFlips&gt;=1000:\n        # Either return current ratio or long run ratio of .5\n        return max(.5,currentRatio)\n    \n    return runSingleSimulation(numPreviousFlips,numHeads,stopRatio)\n\n\n# This method will run tests with stopRatio being between 50% and 60% inclusive steping by 1% with every new test\ndef run_ten_stopNumber_tests() -&gt; pd.DataFrame:\n    # Test run with 100K flips\n    numRuns = 100000\n\n    # get a unique identifier for our run\n    now = datetime.now()\n    unique_string = str(int(now.timestamp() * 1000)) \n    df = pd.DataFrame()\n    # run test\n    for i in range(0,11):\n        stopRatio = round(i/100+.5,2)\n        simResult = round(runFlipSimulation(numRuns,stopRatio),5)\n\n        df = df._append(pd.DataFrame({ f'Expected Value Test_ID:{unique_string}':simResult }, index=[stopRatio]))\n\n    return df\n\n\n# gather an array of dataframes that we generate through testing\ndfStorageArr = []\nnumTests = 10\nfor i in range(numTests):\n    dfStorageArr.append(run_ten_stopNumber_tests())"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JCP",
    "section": "",
    "text": "jcp@home:~\n\n\n\n\n\n\n\n\n ðŸŒŒ"
  }
]